<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" xmlns:control="br.com.thinklab.util.control.*">
	<mx:Script>
		<![CDATA[
			import bean.FilialBean;
			import bean.GestorRentalBean;
			import bean.ModeloBean;
			import bean.PrefixoBean;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.ListEvent;
			import mx.events.ValidationResultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.validators.Validator;
			
			import util.ProgressBarHelper;
			private var myValidators: Array;
			private var gestorRentalBean: GestorRentalBean = new GestorRentalBean();
			private var urlLogin:String;
			
			public function init(urlLogin:String): void{
				this.urlLogin = urlLogin;
				gridGestor.addEventListener("EXCLUIRGESTOR", removerGestor);
				serviceController.findAllFilial();
				serviceController.findAllGestorRental();
				myValidators = new Array();
				myValidators.push(campoNome);				
				myValidators.push(campoFilialCbx);				
				myValidators.push(campoEmail);				
			}		
			
			private function onResultFindAllFilial(event:ResultEvent): void{
				filialCbx.dataProvider = ArrayCollection(event.result);
			}
			
			private function onResultFindAllGestorRental(event:ResultEvent): void{
				gridGestor.dataProvider = ArrayCollection(event.result);
			}
			
			private function salvarGestorRental(): void{
				var validatorErrorArray: Array = Validator.validateAll(myValidators);;
				var isValidForm: Boolean = validatorErrorArray.length == 0;
				
				if (isValidForm) {
					gestorRentalBean.nome = nomeText.text;
					gestorRentalBean.email = emailText.text ;
					gestorRentalBean.filial = FilialBean(filialCbx.selectedItem).stno;
					serviceController.salvarGestorRental(gestorRentalBean);
				} else {
					var err: ValidationResultEvent;
					var errorMessageArray: Array = [];
					for each (err in validatorErrorArray) {
						var errField: String = FormItem(err.currentTarget.source.parent).label
						errorMessageArray.push(errField + ": Este campo é obrigatório.");
					}
					Alert.show(errorMessageArray.join("\n\n"), "Formulário Inválido", Alert.OK);
				}
			}
			
			private function onResultsalvarGestorRental(event:ResultEvent): void{
				if(event.result != null){
					//gestorRentalBean = GestorRentalBean(event.result);
					Alert.show("Transação realizada com sucesso.");
					//serviceController.findAllPrefixo(ModeloBean(modeloCbx.selectedItem).id);
				}else{
					Alert.show("Ocorreu um erro ao salvar o Cadastro!");
				}
			}
			
			private function removerGestor(ev: Event): void{
				Alert.yesLabel = "Sim";
				Alert.noLabel = "Não";
				Alert.show("Deseja realmente apagar?", "Apagar", 3, this, alertClickHandler);
				
			}
			
			private function alertClickHandler(event:CloseEvent):void {
				if (event.detail==Alert.YES) {
					gestorRentalBean = GestorRentalBean(gridGestor.selectedItem);
					serviceController.removerGestor(gestorRentalBean);	
				}
			}
			
			private function onResultRemoverGestor(event: ResultEvent): void{
				if(Boolean(event.result) == true){
					Alert.show("Cadastro excluído com sucesso.");
					ArrayCollection(gridGestor.dataProvider).removeItemAt(gridGestor.selectedIndex);
					limparCampos();
				}else{
					Alert.show("Ocorreu um erro ao excluir Cadastro!");
				}
			}
			
			private function gridDoubleClick(): void{
				if(gridGestor.selectedIndex != -1) {
					gestorRentalBean = GestorRentalBean(gridGestor.selectedItem);
					nomeText.text = gestorRentalBean.nome;
				}
			}			
			
			private function limparCampos(): void{
				gestorRentalBean = new GestorRentalBean();
				nomeText.text = "";
				emailText.text = "";
				filialCbx.selectedIndex = -1;
			}
			
			private function novo(): void{
				limparCampos();
				//prefixoText.setFocus();
			}
			
			
			protected function button1_clickHandler(event:MouseEvent):void
			{
				this.limparCampos();
			}
//			protected function modeloCbx_changeHandler(event:ListEvent):void
//			{
//				prefixoBean = new PrefixoBean();
//				prefixoText.text = "";
//				valorPrefixo.text = "";
//				serviceController.findAllPrefixo(ModeloBean(modeloCbx.selectedItem).id);				
//			}
			protected function gridGestor_changeHandler():void{
				if(gridGestor.selectedItem != null){		
					if(gridGestor.selectedItem != null){
						gestorRentalBean = GestorRentalBean(gridGestor.selectedItem);
						nomeText.text = gestorRentalBean.nome;
						emailText.text = gestorRentalBean.email;
						filialCbx.selectedItem = gestorRentalBean.filial;
						//this.selectedModelo();
					}
				}
			}
			
//			private function selectedModelo():void{
//				var modeloList:ArrayCollection = ArrayCollection(modeloCbx.dataProvider);
//				for(var i:int=0; i < modeloList.length; i++){
//					var modelo:ModeloBean = ModeloBean(modeloList.getItemAt(i));
//					if(modelo.id == PrefixoBean(gridPrefixo.selectedItem).id){
//						modeloCbx.selectedIndex = i;
//						break;
//					}
//				}
//			}
			
		]]>
	</mx:Script>
	<mx:NumberValidator id="campoFilialCbx" source="{filialCbx}" lowerThanMinError="Este campo  obrigatório." property="selectedIndex" minValue="0" />
	<mx:StringValidator id="campoNome" requiredFieldError="Este campo é obrigatório!" required="true" source="{nomeText}" property="text" />
	<mx:StringValidator id="campoEmail" requiredFieldError="Este campo é obrigatório!" required="true" source="{emailText}" property="text" />
	<mx:RemoteObject destination="service" invoke="{ProgressBarHelper.openProgressBar(this)}" id="serviceController" showBusyCursor="true" fault="ProgressBarHelper.erro(event, urlLogin);ProgressBarHelper.removeProgressBar()">
		<mx:method name="findAllGestorRental" result="onResultFindAllGestorRental(event);ProgressBarHelper.removeProgressBar()"/>	
		<mx:method name="salvarGestorRental" result="onResultsalvarGestorRental(event);ProgressBarHelper.removeProgressBar()"/>
		<mx:method name="removerGestor" result="onResultRemoverGestor(event);ProgressBarHelper.removeProgressBar()"/>
		<mx:method name="findAllFilial" result="onResultFindAllFilial(event);ProgressBarHelper.removeProgressBar()"/>
	</mx:RemoteObject>
	<mx:ApplicationControlBar 
		x="0" y="0"  width="100%" horizontalAlign="center">
		<mx:Label text="Cadastrar Gestor Rental" fontWeight="bold"/>
	</mx:ApplicationControlBar>
	<mx:HBox x="0" y="62" width="100%" horizontalAlign="center">
		<mx:HBox width="100%" horizontalAlign="center">
			<mx:Form width="410">
				<mx:FormItem label="Nome" required="true">
					<mx:TextInput id="nomeText" maxChars="255" width="246"/>
				</mx:FormItem>
				<mx:FormItem label="E-mail" required="true">
					<mx:TextInput id="emailText" maxChars="255" width="246"/>
				</mx:FormItem>
				<mx:FormItem label="Filial" required="true" width="299">
					<mx:ComboBox id="filialCbx" prompt="Selecione" selectedIndex="-1" labelField="stnm" width="244"></mx:ComboBox>
				</mx:FormItem>
				<mx:HBox horizontalAlign="center" width="100%">
					<mx:Button label="Salvar" click="salvarGestorRental()"/>
					<mx:Button label="Novo" click="button1_clickHandler(event)"/>
				</mx:HBox>
			</mx:Form>
		</mx:HBox>
	</mx:HBox>
	<mx:DataGrid x="0" y="341" width="100%" height="317" id="gridGestor" doubleClickEnabled="true" doubleClick="gridGestor_changeHandler()">
		<mx:columns>
			<mx:DataGridColumn headerText="Nome" dataField="descricao"/>
			<mx:DataGridColumn headerText="E-mail" dataField="valor"/>
			<mx:DataGridColumn headerText="Excluir" dataField="excluir">
				<mx:itemRenderer>
					<mx:Component>
						<mx:VBox verticalGap="2" horizontalAlign="center">
							<mx:Image source="img/remover.png" width="15" buttonMode="true" height="15"  click="{dispatchEvent(new Event('EXCLUIRGESTOR', true)) }" />
						</mx:VBox>
					</mx:Component> 	
				</mx:itemRenderer>
			</mx:DataGridColumn>	
		</mx:columns>
	</mx:DataGrid>	
</mx:Canvas>
