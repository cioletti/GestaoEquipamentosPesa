<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" xmlns:control="br.com.thinklab.util.control.*">
	<mx:Script>
		<![CDATA[
			import bean.ComplexidadeBean;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.ValidationResultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.validators.Validator;
			
			import util.ProgressBarHelper;
			private var myValidators: Array;
			private var complexidadeBean: ComplexidadeBean = new ComplexidadeBean();
			private var urlLogin:String;
			
			public function init(urlLogin:String): void{
				this.urlLogin = urlLogin;
				gridComplexidade.addEventListener("EXCLUIRCOMPLEXIDADE", removerComplexidade);
				myValidators = new Array();
				myValidators.push(campoComplexidade);
				myValidators.push(campoFator);
				myValidators.push(campoSigla);
				serviceController.findAllComplexidades();
			}			
			private function onResultFindAllComplexidade(event:ResultEvent): void{
				gridComplexidade.dataProvider = event.result;
			}			
			private function salvarModelo(): void{
				var validatorErrorArray: Array = Validator.validateAll(myValidators);;
				var isValidForm: Boolean = validatorErrorArray.length == 0;
				
				if (isValidForm) {
					complexidadeBean.descricao = complexidadeText.text;
					complexidadeBean.fator = fatorText.text;
					complexidadeBean.sigla = siglaText.text;					
					serviceController.salvarComplexidade(complexidadeBean);
				} else {
					var err: ValidationResultEvent;
					var errorMessageArray: Array = [];
					for each (err in validatorErrorArray) {
						var errField: String = FormItem(err.currentTarget.source.parent).label
						errorMessageArray.push(errField + ": Este campo é obrigatório.");
					}
					Alert.show(errorMessageArray.join("\n\n"), "Formulário Inválido", Alert.OK);
				}
			}
			
			private function onResultSalvarComplexidade(event:ResultEvent): void{
				if(event.result != null){
					complexidadeBean = ComplexidadeBean(event.result);
					Alert.show("Transação realizada com sucesso.");
					init(urlLogin);
					complexidadeText.text = "";
					fatorText.text = "";
					siglaText.text = "";
				}else{
					Alert.show("Ocorreu um erro ao salvar Complexidade!");
				}
			}
			
			private function removerComplexidade(ev: Event): void{
				var comp:ComplexidadeBean = ComplexidadeBean(gridComplexidade.selectedItem);
				if(comp.sigla != "1" && comp.sigla != "2" && comp.sigla != "3"){				
					Alert.yesLabel = "Sim";
					Alert.noLabel = "Não";
					Alert.show("Deseja realmente apagar?", "Apagar", 3, this, alertClickHandler);
				}else{
					Alert.show("Não é possível excluir complexidade "+comp.descricao+"!");
				}	
				
			}			
			private function alertClickHandler(event:CloseEvent):void {
				if (event.detail==Alert.YES) {
					complexidadeBean = ComplexidadeBean(gridComplexidade.selectedItem);
					serviceController.removerComplexidade(complexidadeBean);
					
				}
			}
			
			private function onResultRemoverComplexidade(event: ResultEvent): void{
				if(Boolean(event.result) == true){
					Alert.show("Complexidade excluída com sucesso.");
					limparCampos();
					serviceController.findAllComplexidades();					
				}else{
					Alert.show("Ocorreu um erro ao excluir a Complexidade!");
				}
			}
			
			private function gridDoubleClick(): void{
				if(gridComplexidade.selectedItem != null){
					if(gridComplexidade.selectedIndex != -1) {
						complexidadeBean = ComplexidadeBean(gridComplexidade.selectedItem);
						complexidadeText.text = complexidadeBean.descricao;
						fatorText.text = complexidadeBean.fator;
						siglaText.text = complexidadeBean.sigla;
						var comp:ComplexidadeBean = ComplexidadeBean(gridComplexidade.selectedItem);
						if(comp.sigla  == "1" || comp.sigla ==  "2" || comp.sigla == "3"){
							complexidadeText.enabled = false;
							siglaText.enabled = false;
						}else{
							complexidadeText.enabled = true;
							siglaText.enabled = true;
						}
						
					}
				}
			}			
			
			private function limparCampos(): void{
				complexidadeBean = new ComplexidadeBean();
				complexidadeText.text = "";
				fatorText.text = "";
				siglaText.text = "";
				complexidadeText.enabled = true;
				siglaText.enabled = true;
			}
			
			private function novo(): void{
				limparCampos();
				complexidadeText.setFocus();
				fatorText.setFocus();
				siglaText.setFocus();
			}
			
			protected function button1_clickHandler(event:MouseEvent):void
			{
				this.limparCampos();
				complexidadeText.enabled = true;
				siglaText.enabled = true;
			}
			
		]]>  
	</mx:Script>
	<mx:StringValidator id="campoComplexidade" requiredFieldError="Este campo é obrigatório!" required="true" source="{complexidadeText}" property="text" />
	<mx:StringValidator id="campoFator" requiredFieldError="Este campo é obrigatório!" required="true" source="{fatorText}" property="text" />
	<mx:StringValidator id="campoSigla" requiredFieldError="Este campo é obrigatório!" required="true" source="{siglaText}" property="text" />
	<mx:RemoteObject destination="service" invoke="{ProgressBarHelper.openProgressBar(this)}" id="serviceController" showBusyCursor="true" fault="ProgressBarHelper.erro(event, urlLogin);ProgressBarHelper.removeProgressBar()">
		<mx:method name="findAllComplexidades" result="onResultFindAllComplexidade(event);ProgressBarHelper.removeProgressBar()"/>
		<mx:method name="removerComplexidade" result="onResultRemoverComplexidade(event);ProgressBarHelper.removeProgressBar()"/>
		<mx:method name="salvarComplexidade" result="onResultSalvarComplexidade(event);ProgressBarHelper.removeProgressBar()"/>
		
	</mx:RemoteObject>
	<mx:ApplicationControlBar 
		x="0" y="0"  width="100%" horizontalAlign="center">
		<mx:Label text="Cadastro de Complexidade" fontWeight="bold"/>
	</mx:ApplicationControlBar>
	<mx:HBox x="0" y="62" width="100%" horizontalAlign="center">
		<mx:HBox width="100%" horizontalAlign="center">
			<mx:Form>
				<mx:FormItem label="Complexidade" required="true">
					<mx:TextInput id="complexidadeText" maxChars="255"/>
				</mx:FormItem>
				<mx:FormItem label="Fator" required="true" width="265">
					<control:DecimalInput editable="true"  id="fatorText" width="93" maxChars="6" precision="2" currencyFormat="us" useThousandsSeparator="true"/>							
				</mx:FormItem>	
				
				<mx:FormItem label="Sigla" required="true">
					<mx:TextInput id="siglaText"/>				
				</mx:FormItem>
				<mx:HBox>
					<mx:Button label="Salvar" click="salvarModelo()"/>
					<mx:Button label="Novo" click="button1_clickHandler(event)"/>
				</mx:HBox>
			</mx:Form>
		</mx:HBox>
	</mx:HBox>
	<mx:DataGrid x="0" y="238" width="100%" height="420" id="gridComplexidade" doubleClick="gridDoubleClick()" doubleClickEnabled="true">
		<mx:columns>
			<mx:DataGridColumn headerText="Descrição" dataField="descricao"/>
			<mx:DataGridColumn headerText="Fator" dataField="fator"/>
			<mx:DataGridColumn headerText="Sigla" dataField="sigla"/>
			<mx:DataGridColumn headerText="Excluir" dataField="excluir">
				<mx:itemRenderer>
					<mx:Component>
						<mx:VBox verticalGap="2" horizontalAlign="center">
							<mx:Image source="img/remover.png" width="15" buttonMode="true" height="15"  click="{dispatchEvent(new Event('EXCLUIRCOMPLEXIDADE', true)) }" />
						</mx:VBox>
					</mx:Component> 	
				</mx:itemRenderer>
			</mx:DataGridColumn>	
		</mx:columns>
	</mx:DataGrid>
	
</mx:Canvas>
