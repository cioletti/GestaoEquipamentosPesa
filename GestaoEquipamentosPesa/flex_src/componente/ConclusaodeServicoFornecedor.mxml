<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%">
	<mx:Script>
		<![CDATA[
			import bean.SegmentoBean;
			import bean.ServicoTerceirosBean;
			import bean.UsuarioBean;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.IFlexDisplayObject;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			import util.ProgressBarHelper;
			private var urlLogin:String;
			private var uploadFile: FileReference;
			private var filtro = new FileFilter("Selecione o arquivo(PDF, Word ou Excel)", "*.pdf;*.doc;*.xls");
			public function init(urlLogin:String, usuario:UsuarioBean):void{
				this.urlLogin = urlLogin;	
				gridFornecedor.addEventListener("CONCLUIR", concluirServTerceiros);
				gridFornecedor.addEventListener("INICIARSERVICO", iniciarServTerceiros);
				gridFornecedor.addEventListener("ANEXAR", adicionarArquivo);
				gridFornecedor.addEventListener("VISUALIZAR", popupVisualizarArquivos);
				gridFornecedor.addEventListener("DATAENTREGA", dataPrevisaoEntrega);
				serviceController.findServConclusaoFornecedor(null);
			}
			private var popupDataEntrega:PopupDataPrevisaoTerminoServTerc;
			protected function dataPrevisaoEntrega(ev:Event):void
			{
				popupDataEntrega = new PopupDataPrevisaoTerminoServTerc();
				popupDataEntrega.addEventListener(CloseEvent.CLOSE, removePopPrevisaoTerminoServTercPopUp);
				PopUpManager.addPopUp(popupDataEntrega, this, true);
				PopUpManager.centerPopUp(popupDataEntrega);
			}
			private function removePopPrevisaoTerminoServTercPopUp(obj:CloseEvent):void{
				PopUpManager.removePopUp(obj.currentTarget as IFlexDisplayObject);
				if(popupDataEntrega.clickButtonOk == true){
					serviceController.savePrevisaoDataTerminoServico(ServicoTerceirosBean(gridFornecedor.selectedItem), popupDataEntrega.data.text)
				}
			}
			private function onResultFindSavePrevisaoDataTerminoServico(event:ResultEvent):void{
				if(event.result == true){
					serviceController.findServConclusaoFornecedor(null);
					Alert.show("Data de previsão de término de serviço de terceiros atualizada com sucesso!", "Alerta");
					return;
				}
				Alert.show("Erro ao tentar atualizar Data de previsão de término de serviço de terceiros!", "Alerta");
			}
			
			private function iniciarServTerceiros(ev:Event):void{
				if(ServicoTerceirosBean(gridFornecedor.selectedItem).statusServico == 'EXE'){
					Alert.show("O serviço já foi iniciado!", "Alerta");
					return;
				}
				Alert.yesLabel = "Sim";
				Alert.noLabel = "Não";				
				Alert.show("Deseja realmente iniciar o serviço de terceiros?", "Alerta", 3, this, alertClickHandlerIniciarServTerceiros);				
			}
			
			private function alertClickHandlerIniciarServTerceiros(event:CloseEvent):void {				
				if (event.detail==Alert.YES) {
					serviceController.inicarServicoFornecedor(ServicoTerceirosBean(gridFornecedor.selectedItem).idTipoServicoTerceiros, ServicoTerceirosBean(gridFornecedor.selectedItem).idSegmento);
				}
			}
			
			
			
			private function onResultFindServConclusaoFornecedor(event:ResultEvent):void{
				gridFornecedor.dataProvider = ArrayCollection(event.result);
			}
			private function OnResultInicarServicoFornecedor(event:ResultEvent):void{
				serviceController.findServConclusaoFornecedor(campoPesquisa.text);
			}
			
			private function concluirServTerceiros(ev:Event):void{
				if(ServicoTerceirosBean(gridFornecedor.selectedItem).statusServico == 'ENVFOR'){
					Alert.show("Não é possível concluir serviço de terceiros sem executar o mesmo!", "Alerta");
					return;
				}
				Alert.yesLabel = "Sim";
				Alert.noLabel = "Não";				
				Alert.show("Deseja realmente concluir o serviço de terceiros?", "Alerta", 3, this, alertClickHandlerConcluirServTerceiros);				
			}
			
			private function alertClickHandlerConcluirServTerceiros(event:CloseEvent):void {				
				if (event.detail==Alert.YES) {
					this.popupObsServTerceiros();
				}
			}
			
			private	var popupObs:PopupObs;
			private function popupObsServTerceiros():void{
				popupObs = new PopupObs();
				popupObs.addEventListener(CloseEvent.CLOSE, removePopupObsServTerceiros);
				PopUpManager.addPopUp(popupObs, this, true);
				PopUpManager.centerPopUp(popupObs);
				popupObs.init();
			}
			private function removePopupObsServTerceiros(obj:CloseEvent):void{
				PopUpManager.removePopUp(obj.currentTarget as IFlexDisplayObject);
				if(popupObs != null && popupObs.click == true){
					serviceController.concluirServicoFornecedor(ServicoTerceirosBean(gridFornecedor.selectedItem).idTipoServicoTerceiros, ServicoTerceirosBean(gridFornecedor.selectedItem).idSegmento, popupObs.obsTextArea.text);
				}
			}
			
			private function onResultConcluirServicoFornecedor(event:ResultEvent):void{
				if(Boolean(event.result) == true){
					Alert.show("Conclusão realizada com sucesso!", "Alerta");
					serviceController.findServConclusaoFornecedor(campoPesquisa.text);
					return;
				}
				Alert.show("Erro ao tentar realizar a conclusão!", "Erro");
				return;
			}
			private function adicionarArquivo(ev: Event):void {
				/* Inicializa o FileReference a adicinar os Listeners */
				uploadFile = new FileReference();
				uploadFile.browse([filtro]);
				uploadFile.addEventListener(Event.SELECT, tratarArquivoSelecionado);
				uploadFile.addEventListener(Event.COMPLETE, tratarArquivo);
			}
			
			private function tratarArquivoSelecionado(event:Event):void {
				/* Este metodo LOAD, foi implementado na versao do FP 10,
				* é graças a ele que conseguimos recuperar o ByteArray e enviar para o Server */
				uploadFile.load();
			}
			
			/**
			 * @private
			 * Chamado quando o usuario selecinar o arquivo na popup.
			 */
			private function tratarArquivo(event:Event):void {
				/* Pega a referencia do FileReference */
				uploadFile = event.currentTarget as FileReference;
				
				/* Variavel para armazenar o ByteArray */
				var data:ByteArray = new ByteArray();
				
				/* 'readBytes' é responsavel por ler logicamente os dados do FileReference
				* e repassar o valor do ByteArray do arquivo para a variavel armazenadora 'DATA' */
				uploadFile.data.readBytes(data, 0, uploadFile.data.length);
				var nomeArquivo:String = uploadFile.name;
				
				var diretorio:String = String(ServicoTerceirosBean(gridFornecedor.selectedItem).idSegmento +"_"+ServicoTerceirosBean(gridFornecedor.selectedItem).idTipoServicoTerceiros);
				serviceController.fazerUploadEmDiretorioServicoTerceiros(data, diretorio, nomeArquivo);
			}
			private function OnResultFazerUploadEmDiretorioServicoTerceiros(event:ResultEvent):void{
				if(Boolean(event.result) == true){
					Alert.show("Eviado com sucesso", "Alerta");
					return;
				}
				Alert.show("Erro ao enviar arquivo!", "Erro");
				return;
			}
			private	var popupAnexo:PopUpArquivosServicoTerceiros;
			private function popupVisualizarArquivos(ev:Event):void{
				popupAnexo = new PopUpArquivosServicoTerceiros();
				popupAnexo.addEventListener(CloseEvent.CLOSE, anexoServTerceiros);
				PopUpManager.addPopUp(popupAnexo, this, true);
				PopUpManager.centerPopUp(popupAnexo);
				popupAnexo.init(urlLogin, ServicoTerceirosBean(gridFornecedor.selectedItem));
			}
			
			private function anexoServTerceiros(obj:CloseEvent):void{
				PopUpManager.removePopUp(obj.currentTarget as IFlexDisplayObject);
			}

			protected function button1_clickHandler(event:MouseEvent):void
			{
				serviceController.findServConclusaoFornecedor(campoPesquisa.text);
			}

		]]>
	</mx:Script>
	
	<mx:RemoteObject destination="service" invoke="{ProgressBarHelper.openProgressBar(this)}" id="serviceController" showBusyCursor="true" fault="ProgressBarHelper.erro(event, urlLogin);ProgressBarHelper.removeProgressBar()">
		<mx:method name="findServConclusaoFornecedor" result="onResultFindServConclusaoFornecedor(event);ProgressBarHelper.removeProgressBar()"/>	
		<mx:method name="concluirServicoFornecedor" result="onResultConcluirServicoFornecedor(event);ProgressBarHelper.removeProgressBar()"/>	
		<mx:method name="fazerUploadEmDiretorioServicoTerceiros" result="OnResultFazerUploadEmDiretorioServicoTerceiros(event);ProgressBarHelper.removeProgressBar()"/>	
		<mx:method name="inicarServicoFornecedor" result="OnResultInicarServicoFornecedor(event);ProgressBarHelper.removeProgressBar()"/>	
		<mx:method name="savePrevisaoDataTerminoServico" result="onResultFindSavePrevisaoDataTerminoServico(event);ProgressBarHelper.removeProgressBar()"/>
	</mx:RemoteObject>
	<mx:ApplicationControlBar 
		x="0" y="0"  width="100%" horizontalAlign="center">
		<mx:Label text="Concluir Serviço" fontWeight="bold"/>
	</mx:ApplicationControlBar>
	<mx:DataGrid x="0" y="75" width="100%" height="100%" id="gridFornecedor">
		<mx:columns>
			<mx:DataGridColumn headerText="Situação" dataField="concluir">
				<mx:itemRenderer>
					<mx:Component>
						<mx:VBox verticalGap="2" horizontalAlign="center">
							<mx:Image source="{data.urlStatus}" width="15"  height="15" />
						</mx:VBox>
					</mx:Component> 	
				</mx:itemRenderer>
			</mx:DataGridColumn>
			<mx:DataGridColumn headerText="OS" dataField="numeroOs"/>
			<mx:DataGridColumn headerText="Garantia" dataField="garantia"/>
			<mx:DataGridColumn headerText="Modelo" dataField="modelo"/>
			<mx:DataGridColumn headerText="Série" dataField="serie"/>
			<!--mx:DataGridColumn headerText="Segmento" dataField="numeroSegmento"/-->
			<mx:DataGridColumn headerText="Job Control" dataField="jobControl"/>
			<!--mx:DataGridColumn headerText="Fornecedor" dataField="descricaoFornecedor"/-->
			<mx:DataGridColumn headerText="Descrição" dataField="descricao"/>
			<mx:DataGridColumn headerText="Status" dataField="statusNegociacao"  width="140">
			<mx:itemRenderer>
				<mx:Component>
						<mx:VBox verticalAlign="middle" verticalGap="2" horizontalAlign="center" backgroundColor="{(data.statusNegociacaoConsultor == 'A')?0x99FF99:(data.statusNegociacaoConsultor == 'P')?0xFFCC00:(data.statusNegociacaoConsultor == 'R')?0x99FF6347:0xFFFFFF}">
							<mx:Label text="{data.statusNegociacao}" buttonMode="true" height="15"/>
						</mx:VBox>
				</mx:Component>                            
			</mx:itemRenderer> 				
				</mx:DataGridColumn>	
			<!--mx:DataGridColumn headerText="QTD." dataField="qtdServTerceiros"/>
			<mx:DataGridColumn headerText="Valor" dataField="valor"/-->
			<mx:DataGridColumn headerText="Obs">
				<mx:itemRenderer>
					<mx:Component>
						<mx:TextArea text="{data.obs}"/>
					</mx:Component> 	
				</mx:itemRenderer>
			</mx:DataGridColumn>
			<mx:DataGridColumn headerText="Status" dataField="statusServTerceiros"/>
			<!--mx:DataGridColumn headerText="Data&#13;Previsão&#13;Entrega" dataField="dataPrevisaoEntrega"/-->
			<mx:DataGridColumn headerText="Data&#13;Previsão&#13;Entrega">
				<mx:itemRenderer>
					<mx:Component>
						<mx:HBox  horizontalAlign="center">
							<mx:Image source="img/date.png"  width="15" buttonMode="true" visible="{(data.dataPrevisaoEntrega == null)? true : false}"  includeInLayout="{(data.dataPrevisaoEntrega == null)? true : false}" toolTip="Data Entrega" height="15" click="{dispatchEvent(new Event('DATAENTREGA', true))}"/>
							<mx:Label text="{data.dataPrevisaoEntrega}" visible="{(data.dataPrevisaoEntrega == null)? false : true}"  includeInLayout="{(data.dataPrevisaoEntrega == null)? false : true}" click="{dispatchEvent(new Event('DATAENTREGA', true))}"/>
						</mx:HBox>	
					</mx:Component> 	
				</mx:itemRenderer>
			</mx:DataGridColumn>
			<mx:DataGridColumn headerText="Ações" dataField="concluir">
				<mx:itemRenderer>
					<mx:Component>
						<mx:HBox verticalGap="2" horizontalAlign="center">
							<mx:Image source="img/service.png" width="15" buttonMode="true" height="15"  click="{dispatchEvent(new Event('INICIARSERVICO', true)) }" toolTip="Executar serviço de terceiros!" />
							<mx:Image source="img/confirm.png" width="15" buttonMode="true" height="15"  click="{dispatchEvent(new Event('CONCLUIR', true)) }"  toolTip="Concluir serviço de terceiros!"/>
						</mx:HBox>
					</mx:Component> 	
				</mx:itemRenderer>
			</mx:DataGridColumn>
			<mx:DataGridColumn headerText="Anexar/Visualizar" dataField="anexarVisualizar">
				<mx:itemRenderer>
					<mx:Component>
						<mx:HBox verticalGap="2" horizontalAlign="center">
							<mx:Image source="img/anexo.png" width="15" buttonMode="true" height="15"  click="{dispatchEvent(new Event('ANEXAR', true)) }" />
							<mx:Image source="img/download.png" width="15" buttonMode="true" height="15"  click="{dispatchEvent(new Event('VISUALIZAR', true)) }" />
						</mx:HBox>
					</mx:Component> 	
				</mx:itemRenderer>
			</mx:DataGridColumn>
		</mx:columns>
	</mx:DataGrid>
	<mx:Button x="251" y="45" label="Pesquisar" toolTip="Pesquisar por série, modelo, e OS!" click="button1_clickHandler(event)"/>
	<mx:TextInput x="83" y="45" id="campoPesquisa"/>
	
</mx:Canvas>
