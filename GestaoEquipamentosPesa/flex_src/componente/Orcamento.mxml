<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" xmlns:control="br.com.thinklab.util.control.*">
	<mx:Script>
		<![CDATA[
			import bean.CheckinBean;
			import bean.ClienteBean;
			import bean.FamiliaBean;
			import bean.FatorBean;
			import bean.PrecoBean;
			import bean.PrefixoBean;
			import bean.TreeBean;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.IFlexDisplayObject;
			import mx.events.CloseEvent;
			import mx.events.ListEvent;
			import mx.events.ValidationResultEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			import mx.validators.Validator;
			
			import util.ProgressBarHelper;
			public var cptcd:popUpCptcd;
			private var urlLogin:String;
			private var urlReport:String;
			private var myValidators:Array;
			private var precoBean:PrecoBean = new PrecoBean();
			private var prefixoBean: PrefixoBean = new PrefixoBean();
			private var nomeCliente:String;
			private var end:String;
			private var resultado:String;
			private var valorUnitario:String;
			private var idPreco:String = "";
			private var qtdComp:String = "";
			private var fatorBean:FatorBean = new FatorBean();
			private var tipoTree:String = 'GE';
			[Bindable]
			private var listPrefixo:ArrayCollection = new ArrayCollection();
			private var listPaiTree:ArrayCollection = new ArrayCollection();
			public function init(urlLogin:String):void{
				orcamentoGrid.addEventListener("EXCLUIRCADPRECO", removerCadPreco);
				this.urlLogin = urlLogin;
				var che:CheckinBean = new CheckinBean();
				myValidators = new Array();
				myValidators.push(campoModeloCbx);
				myValidators.push(campoPrefixoCbx);
				myValidators.push(codigoClienteText);					
				//serviceController.findAllModelo();
				serviceController.findAllJobCode();
				serviceController.getUrlReport();
				serviceController.findAllFamilia();
			}
			
			private function onResultFindAllFamilia(event:ResultEvent):void{
				familiaCbx.dataProvider = event.result;
			}
			private function removerCadPreco (ev: Event):void{
				ArrayCollection(precificacaoGrid.dataProvider).addItem(orcamentoGrid.selectedItem);
				ArrayCollection(orcamentoGrid.dataProvider).removeItemAt(orcamentoGrid.selectedIndex);
			}				
			private function onResultFindAllModelo (event:ResultEvent):void{
				modeloCbx.dataProvider = event.result;
			}
			private function onResultFindAllPrefixo (event:ResultEvent):void{
				prefixoCbx.dataProvider = null;
				listPrefixo.removeAll();
				listPrefixo.addAll(event.result as ArrayCollection);
				prefixoCbx.dataProvider = listPrefixo;
				if(modeloCbx.selectedIndex != -1){
					prefixoCbx.enabled = true;
				}
				
				if(PrecoBean(precificacaoGrid.selectedItem) != null){
					var prefixoList:ArrayCollection = ArrayCollection(prefixoCbx.dataProvider);
					for(var i:int=0; i < prefixoList.length; i++){
						var pre:PrefixoBean = PrefixoBean(prefixoList.getItemAt(i));
						if(pre.id == PrecoBean(precificacaoGrid.selectedItem).idPrefixo){
							prefixoCbx.selectedIndex = i;
							break;
						}
					}
					
				}
			}			
			private function onResultFindAllPreco (event:ResultEvent):void{
				precificacaoGrid.dataProvider = ArrayCollection(event.result);
			}
			private function onChangeModelo(event:ListEvent):void{
				prefixoBean = new PrefixoBean();
				serviceController.findAllPrefixo(TreeBean(modeloCbx.selectedItem).idArv);
			}		
			private function onCarregarGridPreco(event:ListEvent):void{
				precoBean.idModelo = TreeBean(modeloCbx.selectedItem).idArv;
				precoBean.idPrefixo = PrefixoBean(prefixoCbx.selectedItem).id;		
				
				serviceController.findAllOrcamento(precoBean);	
			}	
			private function onResultFindAllOrcamento (event:ResultEvent):void{
				precificacaoGrid.dataProvider = ArrayCollection(event.result);
			}
//			private function selectedModelo():void{
//				var modeloList:ArrayCollection = ArrayCollection(modeloCbx.dataProvider);
//				for(var i:int=0; i < modeloList.length; i++){
//					var mod:ModeloBean = ModeloBean(modeloList.getItemAt(i));
//					if(mod.id == PrecoBean(precificacaoGrid.selectedItem).idModelo){
//						modeloCbx.selectedIndex = i;
//						break;
//					}
//				}				
//				serviceController.findAllPrefixo(ModeloBean(modeloCbx.selectedItem).id);
//				cptcd = new popUpCptcd();
//				cptcd.cptcd = "";
//			}
			private function findCliente():void{
				if(clienteText.text == ""){
					Alert.show("O campo de cliente deve ser preenchido!");
					return;
				}
				if(answers.selection.id == "codigo"){
					serviceController.findDataCliente(clienteText.text);
				}else{
					serviceController.findDataNomeCliente(clienteText.text);
				}
				
			}
			private function onResultFindDataCliente(event:ResultEvent):void{
				if((event.result as ClienteBean).msg != null){
					Alert.show((event.result as ClienteBean).msg, "Alerta");
					return;
				}
				codigoCliente.text =  (event.result as ClienteBean).CLCHAVE;
				nomeCliente = (event.result as ClienteBean).RAZSOC;
				end = (event.result as ClienteBean).END;
				
			}
			private function onResultFindDataNomeCliente(event:ResultEvent):void{
				this.popupCliente(ArrayCollection(event.result));
			}
			
			[Bindable]
			private var cliente:Cliente = new Cliente();
			public function popupCliente(clienteList:ArrayCollection):void{
				
				cliente.addEventListener(CloseEvent.CLOSE, removePopUpCliente);
				PopUpManager.addPopUp(cliente,this,true);
				PopUpManager.centerPopUp(cliente)
				cliente.percentWidth = 400;
				cliente.percentHeight = 300;
				cliente.init(clienteList);
				
				
			}
			private function removePopUpCliente(obj:CloseEvent):void{
				PopUpManager.removePopUp(obj.currentTarget as IFlexDisplayObject);
				if((cliente.gridClientes.selectedItem != null && ClienteBean(cliente.gridClientes.selectedItem).FLAGDELETE == 'N')) {// || ClienteBean(cliente.gridClientes.selectedItem).FLAGDELETE == '')
					codigoCliente.text = (ClienteBean(cliente.gridClientes.selectedItem)).CLCHAVE;
					nomeCliente = (ClienteBean(cliente.gridClientes.selectedItem)).RAZSOC;
					end = (ClienteBean(cliente.gridClientes.selectedItem)).END;
					
				}
				
			}
			private function gerarCalculo():void{
				var validatorErrorArray: Array = Validator.validateAll(myValidators);;
				var isValidForm: Boolean = validatorErrorArray.length == 0;
				
				if (isValidForm) {
					
					if (orcamentoGrid.dataProvider != null && ArrayCollection(orcamentoGrid.dataProvider).length > 0){
						var listAux:ArrayCollection = new ArrayCollection();
						listAux.addAll(ArrayCollection(orcamentoGrid.dataProvider));
						precoBean.orcamentoList.removeAll();
						this.precoBean.orcamentoList.addAll(listAux);
						precoBean.idModelo = TreeBean(modeloCbx.selectedItem).idArv;
						precoBean.idPrefixo = PrefixoBean(prefixoCbx.selectedItem).id;	
						precoBean.codCliente = codigoCliente.text;
						precoBean.prefixoStr = prefixoCbx.text;
						if (urgenciaCbx.selected == true){
							precoBean.isUrgente = 'S';
						}else{
							precoBean.isUrgente = 'N';						
						}					
						serviceController.gerarCalculo(precoBean);
					}else{
						Alert.show("Por favor insira itens no grid de orçamento","Alerta!");						
					}
					
				} else {
					var err: ValidationResultEvent;
					var errorMessageArray: Array = [];
					for each (err in validatorErrorArray) {
						var errField: String = FormItem(err.currentTarget.source.parent).label
						errorMessageArray.push(errField + ": Este campo é obrigatório.");
					}
					Alert.show(errorMessageArray.join("\n\n"), "Formulário Inválido", Alert.OK);
				}
			}
			private function onResultGerarCalculo(event:ResultEvent):void{
//				resultado = "R$ "+String(event.result);
//				idPreco = "";
//				qtdComp = "";
//				for each(var list:PrecoBean  in precoBean.orcamentoList){
//					idPreco+= list.id+","+list.qtdItens+"##";
//					//qtdComp+= list.qtdItens+",";					
//				}
				
				
				if(Boolean(event.result) == false){
					Alert.show("Não foi possível criar Orçamento tente Gerar novamente!", "Alerta");
				}else{
					//serviceController.gerarCalculoUnitario(precoBean);
					gerarOrcamento();
				}
			}
			
			private function onResultGerarCalculoUnitario(event:ResultEvent):void{
				valorUnitario = String(event.result);
				gerarOrcamento();
			}
			private function gerarOrcamento():void{
				var uv:URLVariables = new URLVariables();
				//uv.idPreco = idPreco.substr(0, idPreco.length - 2);
				//uv.qtdComp = qtdComp.substr(0, qtdComp.length - 1);
				uv.nomeCliente = nomeCliente;
				uv.end = end;
				uv.resultado = resultado;
				//uv.valorUnitario = valorUnitario.substr(0,valorUnitario.length - 1);
				uv.modelo = TreeBean(modeloCbx.selectedItem).descricao;
				uv.prefixo = (prefixoCbx.selectedItem as PrefixoBean).descricao;				
				var url:URLRequest = new URLRequest(urlReport+"/Orcamento");
				url.method = "POST";
				url.data = uv;
				navigateToURL(url,"_blank");				
			}
			private function onResultGetUrlReport(event:ResultEvent):void{
				urlReport = String(event.result);
			}
			
			private function mostrarToolTip(item: Object):String{
				var str:String = "";
				
				if ((item != null) && (item.descricaoServico != null) && (item.descricaoServico != "")) 
				{
					str = "DESCRIÇÃO SERVIÇO: " + item.descricaoServico + "\n";
				}
				return str;
			}
			
			protected function familiaCbx_changeHandler(event:ListEvent):void
			{				
				serviceController.findAllTreePai(tipoTree, FamiliaBean(familiaCbx.selectedItem).id);
			}
			
			private function onResultFindAllTreePai(event:ResultEvent):void{				
				
				modeloCbx.dataProvider = null;
				listPaiTree.removeAll();
				listPaiTree.addAll(event.result as ArrayCollection);
				modeloCbx.dataProvider = listPaiTree;				
				
			}
		]]>
	</mx:Script>
	<mx:NumberValidator id="campoModeloCbx" source="{modeloCbx}" lowerThanMinError="Este campo  obrigatório." property="selectedIndex" minValue="0" />
	<mx:NumberValidator id="campoPrefixoCbx" source="{prefixoCbx}" lowerThanMinError="Este campo  obrigatório." property="selectedIndex" minValue="0" />
	<mx:StringValidator id="codigoClienteText" requiredFieldError="Este campo é obrigatório!" required="true" source="{codigoCliente}" property="text" />
	
	<mx:RemoteObject destination="service" invoke="{ProgressBarHelper.openProgressBar(this)}" id="serviceController" showBusyCursor="true" fault="{ProgressBarHelper.erro(event,urlLogin);ProgressBarHelper.removeProgressBar();}">
		<mx:method name="findAllModelo" result="onResultFindAllModelo(event);ProgressBarHelper.removeProgressBar()" />
		<mx:method name="findAllPrefixo" result="onResultFindAllPrefixo(event);ProgressBarHelper.removeProgressBar()" />
		<mx:method name="findAllOrcamento" result="onResultFindAllOrcamento(event);ProgressBarHelper.removeProgressBar()" />		
		<mx:method name="findAllPreco" result="onResultFindAllPreco(event);ProgressBarHelper.removeProgressBar()" />		
		<mx:method name="findDataCliente" result="onResultFindDataCliente(event);ProgressBarHelper.removeProgressBar()" />
		<mx:method name="findDataNomeCliente" result="onResultFindDataNomeCliente(event);ProgressBarHelper.removeProgressBar()" />
		<mx:method name="gerarCalculo" result="onResultGerarCalculo(event);ProgressBarHelper.removeProgressBar()" />
		<mx:method name="gerarCalculoUnitario" result="onResultGerarCalculoUnitario(event);ProgressBarHelper.removeProgressBar()" />
		<mx:method name="getUrlReport" result="onResultGetUrlReport(event);ProgressBarHelper.removeProgressBar()" />
		<mx:method name="findAllTreePai" result="onResultFindAllTreePai(event);ProgressBarHelper.removeProgressBar()" />
		<mx:method name="findAllFamilia" result="onResultFindAllFamilia(event);ProgressBarHelper.removeProgressBar()" />
		
	</mx:RemoteObject>
	
	<mx:ApplicationControlBar 
		x="0" y="0"  width="100%" horizontalAlign="center">
		<mx:Label text="Orçamento" fontWeight="bold"/>
	</mx:ApplicationControlBar>
	<mx:HBox x="0" y="37" width="100%" horizontalAlign="center" height="100%">		
		<mx:Form  width="433" height="271">
			<mx:FormItem label="Família" required="false" width="379">
				<mx:ComboBox id="familiaCbx" prompt="Selecione" selectedIndex="-1" labelField="descricao" change="familiaCbx_changeHandler(event)"></mx:ComboBox>
			</mx:FormItem>
			<mx:FormItem label="Modelo" width="322" required="true" height="25">			
				<mx:ComboBox id="modeloCbx" dataProvider="{listPaiTree}" prompt="Selecione" labelField="descricao" change="onChangeModelo(event)" width="188"> </mx:ComboBox>
			</mx:FormItem>
			<mx:FormItem label="Prefixo" required="true" width="322" height="25">
				<mx:ComboBox id="prefixoCbx" prompt="Selecione" labelField="descricao" change="onCarregarGridPreco(event)" enabled="false" width="188"></mx:ComboBox>
			</mx:FormItem>
			<mx:FormItem label="Buscar Cliente" horizontalAlign="center"  borderStyle="solid" cornerRadius="5" borderColor="#FFCC33" width="361" height="59">
				<mx:HBox verticalAlign="middle">
					<mx:VBox>
						<mx:RadioButtonGroup id="answers" />
						<mx:RadioButton group="{answers}" id="codigo" label="Código" selected="true"/>
						<mx:RadioButton group="{answers}" id="nome" label="Nome"/>
						
					</mx:VBox>
					<mx:VBox horizontalAlign="center">
						<mx:TextInput id="clienteText" width="122"/>
						<mx:Button label="Buscar" click="findCliente()"/>
					</mx:VBox>
				</mx:HBox>	
			</mx:FormItem>
			<mx:FormItem label="Código Cliente" width="316">
				<mx:TextInput id="codigoCliente" width="141" enabled="false" maxChars="20" restrict="0-9"/>
			</mx:FormItem>
			<mx:FormItem label="Fator de Urgência" width="284">
				<mx:CheckBox id="urgenciaCbx" />
			</mx:FormItem>	
			<mx:FormItem horizontalAlign="center">
				
				<mx:Button label="Gerar Relatório" click="gerarCalculo()" height="20"/>
			</mx:FormItem>		
		</mx:Form>
	</mx:HBox>
	<mx:VBox x="10" y="311" height="347" width="100%">
		<mx:Grid width="100%">
			<mx:GridRow width="100%" height="100%">
				<mx:GridItem width="100%" height="100%">
					<mx:Label text="Precificação"/>
				</mx:GridItem>
				<mx:GridItem width="100%" height="100%">
					<mx:Label text="Orçamento"/>
				</mx:GridItem>
			</mx:GridRow>
		</mx:Grid>
		<mx:HBox width="100%">
			<mx:DataGrid dataTipFunction="mostrarToolTip" height="330" width="50%" id="precificacaoGrid" dragEnabled="true" dragMoveEnabled="true">
				<mx:columns>
					<mx:DataGridColumn headerText="Modelo" dataField="modeloStr" showDataTips="true"/>
					<mx:DataGridColumn headerText="Prefixo" dataField="prefixoStr" showDataTips="true"/>
					<mx:DataGridColumn headerText="JobCode" dataField="jobCodeDescricao" showDataTips="true"/>
					<mx:DataGridColumn headerText="Comp.Code" dataField="descricaoCompCode" showDataTips="true"/>			
					<mx:DataGridColumn headerText="Complexidade" dataField="complexidadeStr" showDataTips="true"/>			
				</mx:columns>
			</mx:DataGrid>
			
			<mx:DataGrid dataTipFunction="mostrarToolTip" height="330" width="50%" id="orcamentoGrid" dropEnabled="true" editable="true"> 
				<mx:columns>
					<mx:DataGridColumn headerText="Modelo" dataField="modeloStr" editable="false" showDataTips="true"/>
					<mx:DataGridColumn headerText="Prefixo" dataField="prefixoStr" editable="false" showDataTips="true"/>
					<mx:DataGridColumn headerText="Qtd. Comp." dataField="qtdItens" showDataTips="true"/>
					<mx:DataGridColumn headerText="JobCode" dataField="jobCodeDescricao" editable="false" showDataTips="true"/>
					<mx:DataGridColumn headerText="Comp.Code" dataField="descricaoCompCode" editable="false" showDataTips="true"/>			
					<mx:DataGridColumn headerText="Complexidade" dataField="complexidadeStr" editable="false" showDataTips="true"/>
					<mx:DataGridColumn headerText="Excluir" dataField="excluir" editable="false">
						<mx:itemRenderer>
							<mx:Component>
								<mx:VBox verticalGap="2" horizontalAlign="center">
									<mx:Image source="img/remover.png" width="15" buttonMode="true" height="15"  click="{dispatchEvent(new Event('EXCLUIRCADPRECO', true)) }" />
								</mx:VBox>
							</mx:Component> 	
						</mx:itemRenderer>
					</mx:DataGridColumn>
				</mx:columns>
			</mx:DataGrid>
		</mx:HBox>
	</mx:VBox>
	
	
</mx:Canvas>
