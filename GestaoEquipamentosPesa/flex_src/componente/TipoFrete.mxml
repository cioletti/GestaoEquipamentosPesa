<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" xmlns:control="br.com.thinklab.util.control.*">
	<mx:Script>
		<![CDATA[
			import bean.ModeloBean;
			import bean.PrefixoBean;
			import bean.TipoFreteBean;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.ListEvent;
			import mx.events.ValidationResultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.validators.Validator;
			
			import util.ProgressBarHelper;
			private var myValidators: Array;
			private var freteBean: TipoFreteBean = new TipoFreteBean();
			private var urlLogin:String;
			
			public function init(urlLogin:String): void{
				this.urlLogin = urlLogin;
				gridFrete.addEventListener("EXCLUIRFATOR", removerFator);
				serviceController.findAllFrete();
				myValidators = new Array();
				myValidators.push(campoTipoFrete);				
/* 				myValidators.push(campoTaxa);				
				myValidators.push(campoFreteMinimo); */				
			}		
			
			private function onResultFindAllFrete(event:ResultEvent): void{
				gridFrete.dataProvider = ArrayCollection(event.result);
			}
			
			private function salvarFrete(): void{
				var validatorErrorArray: Array = Validator.validateAll(myValidators);;
				var isValidForm: Boolean = validatorErrorArray.length == 0;
				
				if (isValidForm) {
					freteBean.tipoFrete = tipoFreteText.text;
/* 					freteBean.taxa = taxaText.text;
					freteBean.freteMinimo = freteMinimoText.text; */					
					serviceController.salvarFrete(freteBean);
				} else {
					var err: ValidationResultEvent;
					var errorMessageArray: Array = [];
					for each (err in validatorErrorArray) {
						var errField: String = FormItem(err.currentTarget.source.parent).label
						errorMessageArray.push(errField + ": Este campo é obrigatório.");
					}
					Alert.show(errorMessageArray.join("\n\n"), "Formulário Inválido", Alert.OK);
				}
			}
			
			private function onResultSalvarFrete(event:ResultEvent): void{
				if(event.result != null){
					freteBean = TipoFreteBean(event.result);
					Alert.show("Transação realizada com sucesso.","Alerta");
					serviceController.findAllFrete();
				}else{
					Alert.show("Ocorreu um erro ao salvar o Frete!","Alerta");
				}
			}
			
			private function removerFator(ev: Event): void{
				Alert.yesLabel = "Sim";
				Alert.noLabel = "Não";
				Alert.show("Deseja realmente apagar?", "Apagar", 3, this, alertClickHandler);
				
			}
			
			private function alertClickHandler(event:CloseEvent):void {
				if (event.detail==Alert.YES) {
					freteBean = TipoFreteBean(gridFrete.selectedItem);
					serviceController.removerFrete(freteBean);	
				}
			}
			
			private function onResultRemoverFrete(event: ResultEvent): void{
				if(Boolean(event.result) == true){
					Alert.show("Frete excluído com sucesso.","Alerta");
					ArrayCollection(gridFrete.dataProvider).removeItemAt(gridFrete.selectedIndex);
					limparCampos();
				}else{
					Alert.show("Ocorreu um erro ao excluir o Frete!","Alerta");
				}
			}	
			
			private function limparCampos(): void{
				freteBean = new TipoFreteBean();
				tipoFreteText.text = "";
/* 				taxaText.text = "";
				freteMinimoText.text = ""; */
			}
			
			private function novo(): void{
				limparCampos();
				tipoFreteText.setFocus();
			}
			
			
			protected function novo_clickHandler(event:MouseEvent):void
			{
				this.limparCampos();
			}

			protected function gridFrete_changeHandler():void{
				if(gridFrete.selectedItem != null){						
					freteBean = TipoFreteBean(gridFrete.selectedItem);
					tipoFreteText.text = freteBean.tipoFrete;
/* 					taxaText.text = freteBean.taxa;
					freteMinimoText.text = freteBean.freteMinimo;	 */			
				}				
			}

			
		]]>
	</mx:Script>	
	<mx:StringValidator id="campoTipoFrete" requiredFieldError="Este campo é obrigatório!" required="true" source="{tipoFreteText}" property="text" />
	<!--<mx:StringValidator id="campoTaxa" requiredFieldError="Este campo é obrigatório!" required="true" source="{taxaText}" property="text" />
	<mx:StringValidator id="campoFreteMinimo" requiredFieldError="Este campo é obrigatório!" required="true" source="{freteMinimoText}" property="text" />-->
	<mx:RemoteObject destination="service" invoke="{ProgressBarHelper.openProgressBar(this)}" id="serviceController" showBusyCursor="true" fault="ProgressBarHelper.erro(event, urlLogin);ProgressBarHelper.removeProgressBar()">
		<mx:method name="findAllFrete" result="onResultFindAllFrete(event);ProgressBarHelper.removeProgressBar()"/>	
		<mx:method name="salvarFrete" result="onResultSalvarFrete(event);ProgressBarHelper.removeProgressBar()"/>
		<mx:method name="removerFrete" result="onResultRemoverFrete(event);ProgressBarHelper.removeProgressBar()"/>		
	</mx:RemoteObject>
	<mx:ApplicationControlBar 
		x="0" y="0"  width="100%" horizontalAlign="center">
		<mx:Label text="Tipo de Frete" fontWeight="bold"/>
	</mx:ApplicationControlBar>
	<mx:HBox x="0" y="62" width="100%" horizontalAlign="center">
		<mx:HBox width="100%" horizontalAlign="center">
			<mx:Form>
				<mx:FormItem label="Tipo de frete" required="true">
					<mx:TextInput id="tipoFreteText" maxChars="50"/>
				</mx:FormItem>
				<!--<mx:FormItem label="Taxa" required="true">
					<control:DecimalInput editable="true"  id="taxaText" width="93"  maxChars="20"  precision="2" currencyFormat="br" useThousandsSeparator="true"/>
				</mx:FormItem>
				<mx:FormItem label="Frete Mínimo" required="true">
					<control:DecimalInput editable="true"  id="freteMinimoText" width="93"  maxChars="20"  precision="2" currencyFormat="br" useThousandsSeparator="true"/>
				</mx:FormItem>-->
				<mx:HBox horizontalAlign="center" width="100%">
					<mx:Button label="Salvar" click="salvarFrete()"/>
					<mx:Button label="Novo" click="novo_clickHandler(event)"/>
				</mx:HBox>
			</mx:Form>
		</mx:HBox>
	</mx:HBox>
	<mx:DataGrid x="0" y="208" width="100%" height="100%" id="gridFrete" doubleClickEnabled="true" doubleClick="gridFrete_changeHandler()">
		<mx:columns>
			<mx:DataGridColumn headerText="Tipo de frete" dataField="tipoFrete"/>
<!--			<mx:DataGridColumn headerText="Taxa" dataField="taxa"/>
			<mx:DataGridColumn headerText="Frete Mínimo" dataField="freteMinimo"/>-->
			<mx:DataGridColumn headerText="Excluir" dataField="excluir">
				<mx:itemRenderer>
					<mx:Component>
						<mx:VBox verticalGap="2" horizontalAlign="center">
							<mx:Image source="img/remover.png" width="15" buttonMode="true" height="15"  click="{dispatchEvent(new Event('EXCLUIRFATOR', true)) }" />
						</mx:VBox>
					</mx:Component> 	
				</mx:itemRenderer>
			</mx:DataGridColumn>	
		</mx:columns>
	</mx:DataGrid>	
</mx:Canvas>
